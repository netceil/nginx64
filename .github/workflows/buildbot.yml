name: buildbot

on:
  push:
  workflow_dispatch:

env:
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

defaults:
  run:
    shell: 'bash -Eeo pipefail -x {0}'

jobs:
  # Windows builds with MSVC and mingw64
  #
  # mingw32 is excluded, https://github.com/msys2/MINGW-packages/issues/2600
  windows:
    name: windows-2022, ${{ matrix.toolchain }}, ${{ matrix.env }}
    runs-on: windows-2022
    strategy:
      matrix:
        include:
          - toolchain: msvc
            env: x64
          - toolchain: msvc
            env: x86
  #       - toolchain: mingw64
  #         env: x86_64
      fail-fast: false
    defaults:
      run:
        shell: C:\msys64\msys2_shell.cmd -defterm -no-start -where . -full-path -shell bash.exe -Eeo pipefail -x '{0}'
    env:
      pcre2_ver: 10.39
      zlib_ver: 1.3.1
      openssl3_ver: 3.0.15
      openssl_ver: 1.1.1w

    steps:
      - name: Check out nginx sources
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Check out nginx tests
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          repository: nginx/nginx-tests
          path: nginx-tests

      - name: Set MSYSTEM
        run: |
          echo MSYSTEM=MINGW64 >> $GITHUB_ENV

      - name: Set the defaults and set up environment
        run: |
          ENV_JSON=$(cat <<EOF
          {
          "NGINX_CONFIGURE_CMD_WIN": "auto/configure \
                    --builddir=objs \
                    --prefix= \
                    --conf-path=conf/nginx.conf \
                    --pid-path=logs/nginx.pid \
                    --http-log-path=logs/access.log \
                    --error-log-path=logs/error.log \
                    --sbin-path=nginx.exe \
                    --http-client-body-temp-path=temp/client_body_temp \
                    --http-proxy-temp-path=temp/proxy_temp \
                    --http-fastcgi-temp-path=temp/fastcgi_temp \
                    --with-cc-opt=-DFD_SETSIZE=1024 \
                    --with-pcre=objs/lib/pcre \
                    --with-zlib=objs/lib/zlib \
                    --with-select_module \
                    --with-http_realip_module \
                    --with-http_addition_module \
                    --with-http_sub_module \
                    --with-http_dav_module \
                    --with-http_stub_status_module \
                    --with-http_flv_module \
                    --with-http_mp4_module \
                    --with-http_gunzip_module \
                    --with-http_gzip_static_module \
                    --with-http_random_index_module \
                    --with-http_secure_link_module \
                    --with-http_ssl_module \
                    --with-mail_ssl_module \
                    --with-http_auth_request_module \
                    --with-http_v2_module \
                    --with-http_slice_module \
                    --with-stream_ssl_module \
                    --with-stream_ssl_preread_module \
                    --with-stream_realip_module \
                    --with-openssl=objs/lib/openssl",
          "NGINX_CONFIGURE_CC_MSVC": "--with-cc=cl",
          "NGINX_CONFIGURE_CC_MINGW": "--with-cc=/${{ matrix.toolchain }}/bin/${{ matrix.env }}-w64-mingw32-gcc.exe",
          "NGINX_CONFIGURE_ADD_STATIC": "--with-stream --with-mail",
          "NGINX_CONFIGURE_ADD_DYNAMIC": "--with-stream=dynamic --with-mail=dynamic",
          "NGINX_CONFIGURE_OPENSSL_OPT": "no-asm no-tests -D_WIN32_WINNT=0x0601"
          }
          EOF
          )

          NGINX_CONFIGURE_CMD_WIN=$(echo $ENV_JSON | jq -r '.NGINX_CONFIGURE_CMD_WIN')
          NGINX_CONFIGURE_CC_MSVC=$(echo $ENV_JSON | jq -r '.NGINX_CONFIGURE_CC_MSVC')
          NGINX_CONFIGURE_CC_MINGW=$(echo $ENV_JSON | jq -r '.NGINX_CONFIGURE_CC_MINGW')
          NGINX_CONFIGURE_ADD_STATIC=$(echo $ENV_JSON | jq -r '.NGINX_CONFIGURE_ADD_STATIC')
          NGINX_CONFIGURE_ADD_DYNAMIC=$(echo $ENV_JSON | jq -r '.NGINX_CONFIGURE_ADD_DYNAMIC')
          NGINX_CONFIGURE_OPENSSL_OPT=$(echo $ENV_JSON | jq -r '.NGINX_CONFIGURE_OPENSSL_OPT')

          echo NGINX_CONFIGURE_CMD_WIN="$NGINX_CONFIGURE_CMD_WIN" >> $GITHUB_ENV
          echo NGINX_CONFIGURE_CC_MSVC="$NGINX_CONFIGURE_CC_MSVC" >> $GITHUB_ENV
          echo NGINX_CONFIGURE_CC_MINGW="$NGINX_CONFIGURE_CC_MINGW" >> $GITHUB_ENV
          echo NGINX_CONFIGURE_ADD_STATIC="$NGINX_CONFIGURE_ADD_STATIC" >> $GITHUB_ENV
          echo NGINX_CONFIGURE_ADD_DYNAMIC="$NGINX_CONFIGURE_ADD_DYNAMIC" >> $GITHUB_ENV
          echo NGINX_CONFIGURE_OPENSSL_OPT="$NGINX_CONFIGURE_OPENSSL_OPT" >> $GITHUB_ENV

          echo "VCVARSALL=$('C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe' -products \* -latest -property installationPath)\\VC\\Auxiliary\\Build\\vcvarsall.bat" >> $GITHUB_ENV
          echo "VCARCH=${{ matrix.env }}" >> $GITHUB_ENV
          echo "CL=/MP" >> $GITHUB_ENV

          echo 'TEMP=C:\TEMP' >> $GITHUB_ENV
          echo 'TMP=C:\TEMP' >> $GITHUB_ENV
          echo 'TMPDIR=C:\TEMP' >> $GITHUB_ENV

          mkdir -p C:/TEMP/
          mkdir -p C:/tmp/
          mkdir -p t/

      - name: Download and unpack dependencies
        run: |
          mkdir -p objs
          mkdir -p objs/lib
          curl -sLO https://github.com/PCRE2Project/pcre2/releases/download/pcre2-${{ env.pcre2_ver }}/pcre2-${{ env.pcre2_ver }}.tar.gz
          tar -C objs/lib --transform 's/pcre2-${{ env.pcre2_ver }}/pcre/' -xzf ./pcre2-${{ env.pcre2_ver }}.tar.gz
          echo '#include <stdint.h>' > objs/lib/pcre/src/inttypes.h
          curl -sLO https://zlib.net/fossils/zlib-${{ env.zlib_ver }}.tar.gz
          tar -C objs/lib --transform 's/zlib-${{ env.zlib_ver }}/zlib/' -xzf ./zlib-${{ env.zlib_ver }}.tar.gz
          case "${{ matrix.toolchain }}" in
            msvc)
              curl -sLO https://github.com/openssl/openssl/releases/download/openssl-${{ env.openssl3_ver }}/openssl-${{ env.openssl3_ver }}.tar.gz
              tar -C objs/lib --transform 's/openssl-${{ env.openssl3_ver }}/openssl/' -xzf ./openssl-${{ env.openssl3_ver }}.tar.gz
            ;;
            mingw*)
              curl -sLO https://github.com/openssl/openssl/releases/download/OpenSSL_1_1_1w/openssl-${{ env.openssl_ver }}.tar.gz
              tar -C objs/lib --transform 's/openssl-${{ env.openssl_ver }}/openssl/' -xzf ./openssl-${{ env.openssl_ver }}.tar.gz
            ;;
          esac
          cp -R objs objs.deps

      - name: Configure and build
        if: matrix.toolchain == 'msvc'
        shell: cmd
        run: |
          @echo on
          call "%VCVARSALL%" %VCARCH%
          bash.exe ^
            %NGINX_CONFIGURE_CMD_WIN% ^
            %NGINX_CONFIGURE_CC_MSVC% ^
            %NGINX_CONFIGURE_ADD_STATIC% ^
            --with-openssl-opt="%NGINX_CONFIGURE_OPENSSL_OPT%"
          nmake -f objs/Makefile

      - name: Configure and build
        if: startsWith( matrix.toolchain, 'mingw')
        run: |
          $NGINX_CONFIGURE_CMD_WIN \
          $NGINX_CONFIGURE_CC_MINGW \
          $NGINX_CONFIGURE_ADD_STATIC \
          --with-openssl-opt="$NGINX_CONFIGURE_OPENSSL_OPT"
          make -j$(nproc) -k || make

      # - name: Run tests
      #   shell: cmd
      #   working-directory: nginx-tests
      #   run: |
      #     prove --state=save ../t . || prove -v --state=failed
      #   env:
      #     TEST_NGINX_BINARY: "${{ github.workspace }}\\objs\\nginx.exe"
      #     TEST_NGINX_VERBOSE: 1
      #     PERL5LIB: "${{ github.workspace }}\\nginx-tests\\lib"

      # - name: Cleanup
      #   run: make clean

      # - name: Restore dependencies
      #   run: |
      #     cp -R objs.deps objs

      # - name: Configure and build with debug
      #   if: matrix.toolchain == 'msvc'
      #   shell: cmd
      #   run: |
      #     @echo on
      #     call "%VCVARSALL%" %VCARCH%
      #     bash.exe ^
      #       %NGINX_CONFIGURE_CMD_WIN% ^
      #       %NGINX_CONFIGURE_CC_MSVC% ^
      #       %NGINX_CONFIGURE_ADD_STATIC% ^
      #       --with-openssl-opt="%NGINX_CONFIGURE_OPENSSL_OPT%" ^
      #       --with-debug
      #     nmake -f objs/Makefile

      # - name: Configure and build with debug
      #   if: startsWith( matrix.toolchain, 'mingw')
      #   run: |
      #     $NGINX_CONFIGURE_CMD_WIN \
      #     $NGINX_CONFIGURE_CC_MINGW \
      #     $NGINX_CONFIGURE_ADD_STATIC \
      #     --with-openssl-opt="$NGINX_CONFIGURE_OPENSSL_OPT" \
      #     --with-debug
      #     make -j$(nproc) -k || make

      # - name: Run tests with debug
      #   shell: cmd
      #   working-directory: nginx-tests
      #   run: |
      #     prove --state=save ../t . || prove -v --state=failed
      #   env:
      #     TEST_NGINX_BINARY: "${{ github.workspace }}\\objs\\nginx.exe"
      #     TEST_NGINX_VERBOSE: 1
      #     PERL5LIB: "${{ github.workspace }}\\nginx-tests\\lib"

      # - name: Cleanup
      #   run: make clean

      # - name: Restore dependencies
      #   if: startsWith( matrix.toolchain, 'mingw')
      #   run: |
      #     cp -R objs.deps objs

      # - name: Configure and build dynamic with debug
      #   if: startsWith( matrix.toolchain, 'mingw')
      #   run: |
      #     $NGINX_CONFIGURE_CMD_WIN \
      #     $NGINX_CONFIGURE_CC_MINGW \
      #     $NGINX_CONFIGURE_ADD_DYNAMIC \
      #     --with-openssl-opt="$NGINX_CONFIGURE_OPENSSL_OPT" \
      #     --with-debug
      #     make -j$(nproc) -k || make

      # - name: Run tests dynamic debug
      #   if: startsWith( matrix.toolchain, 'mingw')
      #   shell: cmd
      #   working-directory: nginx-tests
      #   run: |
      #     prove --state=save ../t . || prove -v --state=failed
      #   env:
      #     TEST_NGINX_BINARY: "${{ github.workspace }}\\objs\\nginx.exe"
      #     TEST_NGINX_VERBOSE: 1
      #     PERL5LIB: "${{ github.workspace }}\\nginx-tests\\lib"

      - name: Upload Windows build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nginx-windows-${{ matrix.toolchain }}-${{ matrix.env }}
          path: |
            objs/nginx.exe
            objs/*.lib
            objs/*.dll

      - name: Cleanup
        run: make clean
